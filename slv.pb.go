// Copyright (c) Puneeth Rao Lokapalli 2022. All rights reserved.
// Licensed under the Apache license. See LICENSE file in the project root for full license information.

//protoc -Iproto/ -I/usr/local/include --go_out=./proto --go_opt=paths=source_relative --go-grpc_out=./proto --go-grpc_opt=paths=source_relative proto/slv.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.0
// source: slv.proto

package slvpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// List of serverless ledger variable types
type VarType int32

const (
	// Variable type boolean
	VarType_BOOL VarType = 0
	// Variable type int32
	VarType_INT32 VarType = 1
	// Variable type uunsigned int32
	VarType_UINT32 VarType = 2
	// Variable type int64
	VarType_INT64 VarType = 3
	// Variable type unsigned int64
	VarType_UINT64 VarType = 4
	// Variable type double
	VarType_DOUBLE VarType = 5
	// Variable type float
	VarType_FLOAT VarType = 6
	// Variable type string
	VarType_STRING VarType = 7
	// Variable type bytes
	VarType_BYTES VarType = 8
	// Variable type map
	VarType_MAP VarType = 9
	// Variable type user defined structure
	VarType_USER_DEFINED VarType = 10
	// Variable type bitmap
	VarType_BITMAP VarType = 11
)

// Enum value maps for VarType.
var (
	VarType_name = map[int32]string{
		0:  "BOOL",
		1:  "INT32",
		2:  "UINT32",
		3:  "INT64",
		4:  "UINT64",
		5:  "DOUBLE",
		6:  "FLOAT",
		7:  "STRING",
		8:  "BYTES",
		9:  "MAP",
		10: "USER_DEFINED",
		11: "BITMAP",
	}
	VarType_value = map[string]int32{
		"BOOL":         0,
		"INT32":        1,
		"UINT32":       2,
		"INT64":        3,
		"UINT64":       4,
		"DOUBLE":       5,
		"FLOAT":        6,
		"STRING":       7,
		"BYTES":        8,
		"MAP":          9,
		"USER_DEFINED": 10,
		"BITMAP":       11,
	}
)

func (x VarType) Enum() *VarType {
	p := new(VarType)
	*p = x
	return p
}

func (x VarType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VarType) Descriptor() protoreflect.EnumDescriptor {
	return file_slv_proto_enumTypes[0].Descriptor()
}

func (VarType) Type() protoreflect.EnumType {
	return &file_slv_proto_enumTypes[0]
}

func (x VarType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VarType.Descriptor instead.
func (VarType) EnumDescriptor() ([]byte, []int) {
	return file_slv_proto_rawDescGZIP(), []int{0}
}

// List of serverless ledger variable scopes
type VarScope int32

const (
	// Scope of the variable is private only to the serverless function
	VarScope_PRIVATE VarScope = 0
	// Scope of the variable is public. Other functions can access the value.
	VarScope_PUBLIC VarScope = 1
)

// Enum value maps for VarScope.
var (
	VarScope_name = map[int32]string{
		0: "PRIVATE",
		1: "PUBLIC",
	}
	VarScope_value = map[string]int32{
		"PRIVATE": 0,
		"PUBLIC":  1,
	}
)

func (x VarScope) Enum() *VarScope {
	p := new(VarScope)
	*p = x
	return p
}

func (x VarScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VarScope) Descriptor() protoreflect.EnumDescriptor {
	return file_slv_proto_enumTypes[1].Descriptor()
}

func (VarScope) Type() protoreflect.EnumType {
	return &file_slv_proto_enumTypes[1]
}

func (x VarScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VarScope.Descriptor instead.
func (VarScope) EnumDescriptor() ([]byte, []int) {
	return file_slv_proto_rawDescGZIP(), []int{1}
}

// List of serverless ledger variable permissions
type VarPermissions int32

const (
	// Read only permissions for the variable
	VarPermissions_READONLY VarPermissions = 0
	// Read and write permissions for the variable
	VarPermissions_READWRITE VarPermissions = 1
)

// Enum value maps for VarPermissions.
var (
	VarPermissions_name = map[int32]string{
		0: "READONLY",
		1: "READWRITE",
	}
	VarPermissions_value = map[string]int32{
		"READONLY":  0,
		"READWRITE": 1,
	}
)

func (x VarPermissions) Enum() *VarPermissions {
	p := new(VarPermissions)
	*p = x
	return p
}

func (x VarPermissions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VarPermissions) Descriptor() protoreflect.EnumDescriptor {
	return file_slv_proto_enumTypes[2].Descriptor()
}

func (VarPermissions) Type() protoreflect.EnumType {
	return &file_slv_proto_enumTypes[2]
}

func (x VarPermissions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VarPermissions.Descriptor instead.
func (VarPermissions) EnumDescriptor() ([]byte, []int) {
	return file_slv_proto_rawDescGZIP(), []int{2}
}

// List of operations that can be performed on a serverless ledger variable.
// TODO: add more types.
type Operation int32

const (
	// Create a new variable operation
	Operation_NEW Operation = 0
	// Get the value of a variable
	Operation_GET Operation = 1
	// Set the value of a variable
	Operation_SET Operation = 2
	// Perform add operation on variable
	Operation_ADD Operation = 3
	// Perform subtract operation on variable
	Operation_SUB Operation = 4
	// Perform multiply operation on variable
	Operation_MUL Operation = 5
	// Perform divide operation on variable
	Operation_DIV Operation = 6
)

// Enum value maps for Operation.
var (
	Operation_name = map[int32]string{
		0: "NEW",
		1: "GET",
		2: "SET",
		3: "ADD",
		4: "SUB",
		5: "MUL",
		6: "DIV",
	}
	Operation_value = map[string]int32{
		"NEW": 0,
		"GET": 1,
		"SET": 2,
		"ADD": 3,
		"SUB": 4,
		"MUL": 5,
		"DIV": 6,
	}
)

func (x Operation) Enum() *Operation {
	p := new(Operation)
	*p = x
	return p
}

func (x Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_slv_proto_enumTypes[3].Descriptor()
}

func (Operation) Type() protoreflect.EnumType {
	return &file_slv_proto_enumTypes[3]
}

func (x Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation.Descriptor instead.
func (Operation) EnumDescriptor() ([]byte, []int) {
	return file_slv_proto_rawDescGZIP(), []int{3}
}

// Serverless ledger variable message
type SlvVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the variable
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Value of the variable
	Val []byte `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
	// Type of the variable
	Type VarType `protobuf:"varint,3,opt,name=type,proto3,enum=slvpb.VarType" json:"type,omitempty"`
	// Scope of the variable
	Scope VarScope `protobuf:"varint,4,opt,name=scope,proto3,enum=slvpb.VarScope" json:"scope,omitempty"`
	// Permissions of the variable
	Permissions VarPermissions `protobuf:"varint,5,opt,name=permissions,proto3,enum=slvpb.VarPermissions" json:"permissions,omitempty"`
}

func (x *SlvVar) Reset() {
	*x = SlvVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slv_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlvVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlvVar) ProtoMessage() {}

func (x *SlvVar) ProtoReflect() protoreflect.Message {
	mi := &file_slv_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlvVar.ProtoReflect.Descriptor instead.
func (*SlvVar) Descriptor() ([]byte, []int) {
	return file_slv_proto_rawDescGZIP(), []int{0}
}

func (x *SlvVar) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SlvVar) GetVal() []byte {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *SlvVar) GetType() VarType {
	if x != nil {
		return x.Type
	}
	return VarType_BOOL
}

func (x *SlvVar) GetScope() VarScope {
	if x != nil {
		return x.Scope
	}
	return VarScope_PRIVATE
}

func (x *SlvVar) GetPermissions() VarPermissions {
	if x != nil {
		return x.Permissions
	}
	return VarPermissions_READONLY
}

// Execute operation request message
type ExecOpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of operation to perform on the variable
	Operation Operation `protobuf:"varint,1,opt,name=operation,proto3,enum=slvpb.Operation" json:"operation,omitempty"`
	// Variable on which operation must be performed
	Var *SlvVar `protobuf:"bytes,2,opt,name=var,proto3" json:"var,omitempty"`
	// Access token to authorize the operation
	AccessToken string `protobuf:"bytes,3,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
}

func (x *ExecOpReq) Reset() {
	*x = ExecOpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slv_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecOpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecOpReq) ProtoMessage() {}

func (x *ExecOpReq) ProtoReflect() protoreflect.Message {
	mi := &file_slv_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecOpReq.ProtoReflect.Descriptor instead.
func (*ExecOpReq) Descriptor() ([]byte, []int) {
	return file_slv_proto_rawDescGZIP(), []int{1}
}

func (x *ExecOpReq) GetOperation() Operation {
	if x != nil {
		return x.Operation
	}
	return Operation_NEW
}

func (x *ExecOpReq) GetVar() *SlvVar {
	if x != nil {
		return x.Var
	}
	return nil
}

func (x *ExecOpReq) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

// Execute operation response message
type ExecOpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ouput response
	Var *SlvVar `protobuf:"bytes,1,opt,name=var,proto3" json:"var,omitempty"`
	// optional error field
	Err string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ExecOpResp) Reset() {
	*x = ExecOpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slv_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecOpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecOpResp) ProtoMessage() {}

func (x *ExecOpResp) ProtoReflect() protoreflect.Message {
	mi := &file_slv_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecOpResp.ProtoReflect.Descriptor instead.
func (*ExecOpResp) Descriptor() ([]byte, []int) {
	return file_slv_proto_rawDescGZIP(), []int{2}
}

func (x *ExecOpResp) GetVar() *SlvVar {
	if x != nil {
		return x.Var
	}
	return nil
}

func (x *ExecOpResp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

var File_slv_proto protoreflect.FileDescriptor

var file_slv_proto_rawDesc = []byte{
	0x0a, 0x09, 0x73, 0x6c, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x6c, 0x76,
	0x70, 0x62, 0x22, 0xb2, 0x01, 0x0a, 0x06, 0x53, 0x6c, 0x76, 0x56, 0x61, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x76, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x73, 0x6c, 0x76, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x73, 0x6c, 0x76, 0x70, 0x62, 0x2e, 0x56,
	0x61, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x37,
	0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x6c, 0x76, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7e, 0x0a, 0x09, 0x45, 0x78, 0x65, 0x63, 0x4f,
	0x70, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x73, 0x6c, 0x76, 0x70, 0x62, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x03, 0x76, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x6c, 0x76, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x76, 0x56, 0x61, 0x72,
	0x52, 0x03, 0x76, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3f, 0x0a, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x4f,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x03, 0x76, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x6c, 0x76, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x76, 0x56, 0x61,
	0x72, 0x52, 0x03, 0x76, 0x61, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x2a, 0x96, 0x01, 0x0a, 0x07, 0x56, 0x61, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e,
	0x54, 0x33, 0x32, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41,
	0x54, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12,
	0x09, 0x0a, 0x05, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41,
	0x50, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x10,
	0x0b, 0x2a, 0x23, 0x0a, 0x08, 0x56, 0x61, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x10, 0x01, 0x2a, 0x2d, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x41, 0x44,
	0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x41, 0x44, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x10, 0x01, 0x2a, 0x4a, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x57, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x47,
	0x45, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x45, 0x54, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x44, 0x44, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x42, 0x10, 0x04, 0x12,
	0x07, 0x0a, 0x03, 0x4d, 0x55, 0x4c, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x49, 0x56, 0x10,
	0x06, 0x32, 0x34, 0x0a, 0x05, 0x4c, 0x76, 0x53, 0x76, 0x63, 0x12, 0x2b, 0x0a, 0x02, 0x4f, 0x70,
	0x12, 0x10, 0x2e, 0x73, 0x6c, 0x76, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x70, 0x52,
	0x65, 0x71, 0x1a, 0x11, 0x2e, 0x73, 0x6c, 0x76, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x4f,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x6c, 0x70, 0x72, 0x61, 0x6f,
	0x2f, 0x73, 0x6c, 0x76, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_slv_proto_rawDescOnce sync.Once
	file_slv_proto_rawDescData = file_slv_proto_rawDesc
)

func file_slv_proto_rawDescGZIP() []byte {
	file_slv_proto_rawDescOnce.Do(func() {
		file_slv_proto_rawDescData = protoimpl.X.CompressGZIP(file_slv_proto_rawDescData)
	})
	return file_slv_proto_rawDescData
}

var file_slv_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_slv_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_slv_proto_goTypes = []interface{}{
	(VarType)(0),        // 0: slvpb.VarType
	(VarScope)(0),       // 1: slvpb.VarScope
	(VarPermissions)(0), // 2: slvpb.VarPermissions
	(Operation)(0),      // 3: slvpb.Operation
	(*SlvVar)(nil),      // 4: slvpb.SlvVar
	(*ExecOpReq)(nil),   // 5: slvpb.ExecOpReq
	(*ExecOpResp)(nil),  // 6: slvpb.ExecOpResp
}
var file_slv_proto_depIdxs = []int32{
	0, // 0: slvpb.SlvVar.type:type_name -> slvpb.VarType
	1, // 1: slvpb.SlvVar.scope:type_name -> slvpb.VarScope
	2, // 2: slvpb.SlvVar.permissions:type_name -> slvpb.VarPermissions
	3, // 3: slvpb.ExecOpReq.operation:type_name -> slvpb.Operation
	4, // 4: slvpb.ExecOpReq.var:type_name -> slvpb.SlvVar
	4, // 5: slvpb.ExecOpResp.var:type_name -> slvpb.SlvVar
	5, // 6: slvpb.LvSvc.Op:input_type -> slvpb.ExecOpReq
	6, // 7: slvpb.LvSvc.Op:output_type -> slvpb.ExecOpResp
	7, // [7:8] is the sub-list for method output_type
	6, // [6:7] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_slv_proto_init() }
func file_slv_proto_init() {
	if File_slv_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_slv_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlvVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slv_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecOpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slv_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecOpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_slv_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_slv_proto_goTypes,
		DependencyIndexes: file_slv_proto_depIdxs,
		EnumInfos:         file_slv_proto_enumTypes,
		MessageInfos:      file_slv_proto_msgTypes,
	}.Build()
	File_slv_proto = out.File
	file_slv_proto_rawDesc = nil
	file_slv_proto_goTypes = nil
	file_slv_proto_depIdxs = nil
}
