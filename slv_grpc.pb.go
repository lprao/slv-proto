// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package slvpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SlvSvcClient is the client API for SlvSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlvSvcClient interface {
	// Perfrom the requested operation and provide the response.
	Op(ctx context.Context, in *ExecOpReq, opts ...grpc.CallOption) (*ExecOpResp, error)
}

type slvSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewSlvSvcClient(cc grpc.ClientConnInterface) SlvSvcClient {
	return &slvSvcClient{cc}
}

func (c *slvSvcClient) Op(ctx context.Context, in *ExecOpReq, opts ...grpc.CallOption) (*ExecOpResp, error) {
	out := new(ExecOpResp)
	err := c.cc.Invoke(ctx, "/slvpb.SlvSvc/Op", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlvSvcServer is the server API for SlvSvc service.
// All implementations must embed UnimplementedSlvSvcServer
// for forward compatibility
type SlvSvcServer interface {
	// Perfrom the requested operation and provide the response.
	Op(context.Context, *ExecOpReq) (*ExecOpResp, error)
	mustEmbedUnimplementedSlvSvcServer()
}

// UnimplementedSlvSvcServer must be embedded to have forward compatible implementations.
type UnimplementedSlvSvcServer struct {
}

func (UnimplementedSlvSvcServer) Op(context.Context, *ExecOpReq) (*ExecOpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Op not implemented")
}
func (UnimplementedSlvSvcServer) mustEmbedUnimplementedSlvSvcServer() {}

// UnsafeSlvSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlvSvcServer will
// result in compilation errors.
type UnsafeSlvSvcServer interface {
	mustEmbedUnimplementedSlvSvcServer()
}

func RegisterSlvSvcServer(s grpc.ServiceRegistrar, srv SlvSvcServer) {
	s.RegisterService(&SlvSvc_ServiceDesc, srv)
}

func _SlvSvc_Op_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecOpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlvSvcServer).Op(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slvpb.SlvSvc/Op",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlvSvcServer).Op(ctx, req.(*ExecOpReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SlvSvc_ServiceDesc is the grpc.ServiceDesc for SlvSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SlvSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "slvpb.SlvSvc",
	HandlerType: (*SlvSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Op",
			Handler:    _SlvSvc_Op_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slv.proto",
}
